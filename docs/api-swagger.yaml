openapi: 3.0.3
info:
  title: KubernetesUserManager - API
  description: |-
    This is a backend API server documentation for KubernetesUserManager

    Some useful links:
    - [Jira](https://samuelus.atlassian.net/jira/software/projects/ZPI/boards/4)
    - [Confluence](https://samuelus.atlassian.net/wiki/spaces/ZPI/overview)
  version: 0.0.1
servers:
  - url: http://localhost:8080/api/v1
security:
  - bearerAuth: []
tags:
  - name: Kubernetes Resources
    description: Operations related to Kubernetes resources.
  - name: SSO
    description: Single Sign-On endpoints.
  - name: Admin Panel
    description: Administrative operations.
  - name: Helm Applications
    description: Operations related to Helm releases.
paths:
  /k8s/namespaced/{resourceType}/{namespace}:
    get:
      tags:
        - Kubernetes Resources
      summary: List all resources in a namespace
      description: Retrieves a list of all resources of the specified type within
        the given namespace.
      operationId: listNamespacedResources
      parameters:
        - name: resourceType
          in: path
          description: Type of the Kubernetes resource.
          required: true
          style: simple
          explode: false
          schema:
            type: string
            enum:
              - Pod
              - Deployment
              - ConfigMap
              - Secret
              - Ingress
              - PersistentVolumeClaim
              - ReplicaSet
              - StatefulSet
              - DaemonSet
              - Job
              - CronJob
              - Service
              - ServiceAccount
        - name: namespace
          in: path
          description: Name of the namespace.
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: labelSelector
          in: query
          description: Selector to filter resources by labels.
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: fieldSelector
          in: query
          description: Selector to filter resources by fields.
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: limit
          in: query
          description: Maximum number of resources to return.
          required: false
          style: form
          explode: true
          schema:
            type: integer
            format: int32
        - name: continue
          in: query
          description: Token to continue listing resources from.
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: sortBy
          in: query
          description: Field to sort the resources by.
          required: false
          style: form
          explode: true
          schema:
            type: string
            enum:
              - name
              - creationTimestamp
        - name: order
          in: query
          description: Order of sorting.
          required: false
          style: form
          explode: true
          schema:
            type: string
            enum:
              - asc
              - desc
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Resource'
                x-content-type: application/json
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "401":
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "403":
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - bearerAuth: []
    post:
      tags:
        - Kubernetes Resources
      summary: Create a new resource
      description: Creates a new resource of the specified type in the given namespace.
      operationId: createNamespacedResource
      parameters:
        - name: resourceType
          in: path
          description: Type of the Kubernetes resource.
          required: true
          style: simple
          explode: false
          schema:
            type: string
            enum:
              - Pod
              - Deployment
              - ConfigMap
              - Secret
              - Ingress
              - PersistentVolumeClaim
              - ReplicaSet
              - StatefulSet
              - DaemonSet
              - Job
              - CronJob
              - Service
              - ServiceAccount
        - name: namespace
          in: path
          description: Name of the namespace.
          required: true
          style: simple
          explode: false
          schema:
            type: string
      requestBody:
        description: JSON object representing the resource to be created.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Resource'
        required: true
      responses:
        "201":
          description: Resource created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Resource'
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "401":
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "403":
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - bearerAuth: []
  /k8s/namespaced/{resourceType}/{namespace}/{resourceName}:
    get:
      tags:
        - Kubernetes Resources
      summary: Get details of a specific resource
      description: Retrieves detailed information about a specific resource within
        a namespace.
      operationId: getNamespacedResource
      parameters:
        - name: resourceType
          in: path
          description: Type of the Kubernetes resource.
          required: true
          style: simple
          explode: false
          schema:
            type: string
            enum:
              - Pod
              - Deployment
              - ConfigMap
              - Secret
              - Ingress
              - PersistentVolumeClaim
              - ReplicaSet
              - StatefulSet
              - DaemonSet
              - Job
              - CronJob
              - Service
              - ServiceAccount
        - name: namespace
          in: path
          description: Name of the namespace.
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: resourceName
          in: path
          description: Name of the resource.
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Resource'
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "401":
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "403":
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - bearerAuth: []
    put:
      tags:
        - Kubernetes Resources
      summary: Update an existing resource
      description: Updates an existing resource with new configuration or data.
      operationId: updateNamespacedResource
      parameters:
        - name: resourceType
          in: path
          description: Type of the Kubernetes resource.
          required: true
          style: simple
          explode: false
          schema:
            type: string
            enum:
              - Pod
              - Deployment
              - ConfigMap
              - Secret
              - Ingress
              - PersistentVolumeClaim
              - ReplicaSet
              - StatefulSet
              - DaemonSet
              - Job
              - CronJob
              - Service
              - ServiceAccount
        - name: namespace
          in: path
          description: Name of the namespace.
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: resourceName
          in: path
          description: Name of the resource.
          required: true
          style: simple
          explode: false
          schema:
            type: string
      requestBody:
        description: JSON object representing the updated resource.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Resource'
        required: true
      responses:
        "200":
          description: Resource updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Resource'
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "401":
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "403":
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - bearerAuth: []
    delete:
      tags:
        - Kubernetes Resources
      summary: Delete a resource
      description: Deletes the specified resource from the namespace.
      operationId: deleteNamespacedResource
      parameters:
        - name: resourceType
          in: path
          description: Type of the Kubernetes resource.
          required: true
          style: simple
          explode: false
          schema:
            type: string
            enum:
              - Pod
              - Deployment
              - ConfigMap
              - Secret
              - Ingress
              - PersistentVolumeClaim
              - ReplicaSet
              - StatefulSet
              - DaemonSet
              - Job
              - CronJob
              - Service
              - ServiceAccount
        - name: namespace
          in: path
          description: Name of the namespace.
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: resourceName
          in: path
          description: Name of the resource.
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: Resource deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "401":
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "403":
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - bearerAuth: []
  /k8s/non-namespaced/{resourceType}:
    get:
      tags:
        - Kubernetes Resources
      summary: List all resources
      description: Retrieves a list of all resources of the specified type cluster-wide.
      operationId: listClusterResources
      parameters:
        - name: resourceType
          in: path
          description: Type of the non-namespaced Kubernetes resource.
          required: true
          style: simple
          explode: false
          schema:
            type: string
            enum:
              - Node
              - Namespace
              - CustomResourceDefinition
              - PersistentVolume
              - StorageClass
              - ClusterRole
              - ClusterRoleBinding
        - name: labelSelector
          in: query
          description: Selector to filter resources by labels.
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: fieldSelector
          in: query
          description: Selector to filter resources by fields.
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: limit
          in: query
          description: Maximum number of resources to return.
          required: false
          style: form
          explode: true
          schema:
            type: integer
            format: int32
        - name: continue
          in: query
          description: Token to continue listing resources from.
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: sortBy
          in: query
          description: Field to sort the resources by.
          required: false
          style: form
          explode: true
          schema:
            type: string
            enum:
              - name
              - creationTimestamp
        - name: order
          in: query
          description: Order of sorting.
          required: false
          style: form
          explode: true
          schema:
            type: string
            enum:
              - asc
              - desc
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Resource'
                x-content-type: application/json
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "401":
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "403":
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - bearerAuth: []
    post:
      tags:
        - Kubernetes Resources
      summary: Create a new resource
      description: Creates a new resource of the specified type.
      operationId: createClusterResource
      parameters:
        - name: resourceType
          in: path
          description: Type of the non-namespaced Kubernetes resource.
          required: true
          style: simple
          explode: false
          schema:
            type: string
            enum:
              - Node
              - Namespace
              - CustomResourceDefinition
              - PersistentVolume
              - StorageClass
              - ClusterRole
              - ClusterRoleBinding
      requestBody:
        description: JSON object representing the resource to be created.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Resource'
        required: true
      responses:
        "201":
          description: Resource created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Resource'
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "401":
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "403":
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - bearerAuth: []
  /k8s/non-namespaced/{resourceType}/{resourceName}:
    get:
      tags:
        - Kubernetes Resources
      summary: Get details of a specific resource
      description: Retrieves detailed information about a specific resource.
      operationId: getClusterResource
      parameters:
        - name: resourceType
          in: path
          description: Type of the non-namespaced Kubernetes resource.
          required: true
          style: simple
          explode: false
          schema:
            type: string
            enum:
              - Node
              - Namespace
              - CustomResourceDefinition
              - PersistentVolume
              - StorageClass
              - ClusterRole
              - ClusterRoleBinding
        - name: resourceName
          in: path
          description: Name of the resource.
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Resource'
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "401":
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "403":
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - bearerAuth: []
    put:
      tags:
        - Kubernetes Resources
      summary: Update an existing resource
      description: Updates an existing resource with new configuration or data.
      operationId: updateClusterResource
      parameters:
        - name: resourceType
          in: path
          description: Type of the non-namespaced Kubernetes resource.
          required: true
          style: simple
          explode: false
          schema:
            type: string
            enum:
              - Node
              - Namespace
              - CustomResourceDefinition
              - PersistentVolume
              - StorageClass
              - ClusterRole
              - ClusterRoleBinding
        - name: resourceName
          in: path
          description: Name of the resource.
          required: true
          style: simple
          explode: false
          schema:
            type: string
      requestBody:
        description: JSON object representing the updated resource.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Resource'
        required: true
      responses:
        "200":
          description: Resource updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Resource'
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "401":
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "403":
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - bearerAuth: []
    delete:
      tags:
        - Kubernetes Resources
      summary: Delete a resource
      description: Deletes the specified resource from the cluster.
      operationId: deleteClusterResource
      parameters:
        - name: resourceType
          in: path
          description: Type of the non-namespaced Kubernetes resource.
          required: true
          style: simple
          explode: false
          schema:
            type: string
            enum:
              - Node
              - Namespace
              - CustomResourceDefinition
              - PersistentVolume
              - StorageClass
              - ClusterRole
              - ClusterRoleBinding
        - name: resourceName
          in: path
          description: Name of the resource.
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: Resource deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "401":
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "403":
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - bearerAuth: []
  /auth/callback:
    post:
      tags:
        - SSO
      summary: Exchange authorization code for tokens
      description: Exchanges an authorization code for access and refresh tokens.
      operationId: exchangeAuthCode
      requestBody:
        description: Authorization code received from the authentication provider.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/auth_callback_body'
        required: true
      responses:
        "200":
          description: Tokens issued successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthTokens'
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "401":
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security: []
  /auth/refresh:
    post:
      tags:
        - SSO
      summary: Refresh tokens
      description: Refreshes the access token using a valid refresh token.
      operationId: refreshToken
      requestBody:
        description: Refresh token required for generating a new access token.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/auth_refresh_body'
        required: true
      responses:
        "200":
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthTokens'
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "401":
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security: []
  /auth/logout:
    post:
      tags:
        - SSO
      summary: Logout user
      description: Logs out the user and invalidates their session tokens.
      operationId: logoutUser
      responses:
        "200":
          description: User logged out successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "401":
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - bearerAuth: []
  /auth/status:
    get:
      tags:
        - SSO
      summary: Check login status
      description: Checks whether the user is currently logged in and retrieves session
        details and account privileges.
      operationId: checkLoginStatus
      responses:
        "200":
          description: User is logged in
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserStatus'
        "401":
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - bearerAuth: []
  /users:
    get:
      tags:
        - Admin Panel
      summary: Retrieve list of users
      description: Fetches a list of all registered users.
      operationId: listUsers
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
                x-content-type: application/json
        "401":
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "403":
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - bearerAuth: []
  /users/{id}:
    get:
      tags:
        - Admin Panel
      summary: Retrieve details of a single user
      description: Fetches detailed information about a specific user by ID.
      operationId: getUser
      parameters:
        - name: id
          in: path
          description: Unique identifier of the user.
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "401":
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "403":
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - bearerAuth: []
    delete:
      tags:
        - Admin Panel
      summary: Delete a user
      description: Removes a user from the system based on their ID.
      operationId: deleteUser
      parameters:
        - name: id
          in: path
          description: Unique identifier of the user.
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: User deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "401":
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "403":
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - bearerAuth: []
  /users/{id}/permissions:
    put:
      tags:
        - Admin Panel
      summary: Assign or change user permissions
      description: Updates the permission levels for a specific user.
      operationId: updateUserPermissions
      parameters:
        - name: id
          in: path
          description: Unique identifier of the user.
          required: true
          style: simple
          explode: false
          schema:
            type: string
      requestBody:
        description: Permission levels to assign to the user.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/id_permissions_body'
        required: true
      responses:
        "200":
          description: Permissions updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "401":
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "403":
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - bearerAuth: []
  /helm/releases:
    get:
      tags:
        - Helm Applications
      summary: List all Helm releases
      description: Retrieves a list of all Helm releases across all namespaces.
      operationId: listHelmReleases
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/HelmRelease'
                x-content-type: application/json
        "401":
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "403":
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - bearerAuth: []
  /helm/releases/{namespace}:
    get:
      tags:
        - Helm Applications
      summary: List releases in a specific namespace
      description: Retrieves all Helm releases within the specified namespace.
      operationId: listHelmReleasesInNamespace
      parameters:
        - name: namespace
          in: path
          description: Name of the namespace.
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/HelmRelease'
                x-content-type: application/json
        "401":
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "403":
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - bearerAuth: []
    post:
      tags:
        - Helm Applications
      summary: Install a new release
      description: Installs a new Helm release in the specified namespace using data
        provided in the request body.
      operationId: installHelmRelease
      parameters:
        - name: namespace
          in: path
          description: Name of the namespace.
          required: true
          style: simple
          explode: false
          schema:
            type: string
      requestBody:
        description: Configuration data for the new Helm release.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HelmRelease'
        required: true
      responses:
        "201":
          description: Helm release installed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HelmRelease'
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "401":
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "403":
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - bearerAuth: []
  /helm/releases/{namespace}/{releaseName}:
    get:
      tags:
        - Helm Applications
      summary: Get details of a specific release
      description: Fetches detailed information about a particular Helm release.
      operationId: getHelmRelease
      parameters:
        - name: namespace
          in: path
          description: Name of the namespace.
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: releaseName
          in: path
          description: Name of the Helm release.
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HelmRelease'
        "401":
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "403":
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - bearerAuth: []
    put:
      tags:
        - Helm Applications
      summary: Update an existing release
      description: Updates an existing Helm release with new configuration values.
      operationId: updateHelmRelease
      parameters:
        - name: namespace
          in: path
          description: Name of the namespace.
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: releaseName
          in: path
          description: Name of the Helm release.
          required: true
          style: simple
          explode: false
          schema:
            type: string
      requestBody:
        description: Updated configuration data for the Helm release.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HelmRelease'
        required: true
      responses:
        "200":
          description: Helm release updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HelmRelease'
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "401":
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "403":
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - bearerAuth: []
    delete:
      tags:
        - Helm Applications
      summary: Uninstall a release
      description: Uninstalls the specified Helm release from the namespace.
      operationId: uninstallHelmRelease
      parameters:
        - name: namespace
          in: path
          description: Name of the namespace.
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: releaseName
          in: path
          description: Name of the Helm release.
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: Helm release uninstalled successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "401":
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "403":
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - bearerAuth: []
  /helm/releases/{namespace}/{releaseName}/history:
    get:
      tags:
        - Helm Applications
      summary: Get release history
      description: Retrieves the version history of the specified Helm release.
      operationId: getHelmReleaseHistory
      parameters:
        - name: namespace
          in: path
          description: Name of the namespace.
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: releaseName
          in: path
          description: Name of the Helm release.
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: Release history retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/HelmReleaseHistory'
                x-content-type: application/json
        "401":
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "403":
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - bearerAuth: []
  /helm/releases/{namespace}/{releaseName}/rollback:
    post:
      tags:
        - Helm Applications
      summary: Rollback a release
      description: Performs a rollback of the Helm release to a previous version.
      operationId: rollbackHelmRelease
      parameters:
        - name: namespace
          in: path
          description: Name of the namespace.
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: releaseName
          in: path
          description: Name of the Helm release.
          required: true
          style: simple
          explode: false
          schema:
            type: string
      requestBody:
        description: Version number to rollback to (optional).
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/releaseName_rollback_body'
        required: false
      responses:
        "200":
          description: Helm release rolled back successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HelmRelease'
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "401":
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "403":
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - bearerAuth: []
components:
  schemas:
    Resource:
      type: object
      properties:
        apiVersion:
          type: string
          description: API version of the resource
        kind:
          type: string
          description: Kind of the resource
        metadata:
          type: object
          description: Specification of the metadata
        spec:
          type: object
          description: Specification of the resource
        status:
          type: object
          description: Current status of the resource
      description: Generic Kubernetes resource
      example:
        metadata: {}
        apiVersion: apiVersion
        kind: kind
        spec: {}
        status: {}
    Error:
      type: object
      properties:
        code:
          type: integer
          description: Error code
          format: int32
        message:
          type: string
          description: Error message
        details:
          type: object
          description: Additional error details
      description: Error response
    Status:
      type: object
      properties:
        status:
          type: string
          description: "Status of the operation (e.g., Success, Failure)"
        message:
          type: string
          description: Message providing additional information
        code:
          type: integer
          description: HTTP status code
          format: int32
      description: Status response after an operation
      example:
        code: 0
        message: message
        status: status
    AuthTokens:
      type: object
      properties:
        accessToken:
          type: string
          description: JWT access token
        refreshToken:
          type: string
          description: Refresh token
        expiresIn:
          type: integer
          description: Access token expiration time in seconds
          format: int32
      description: Authentication tokens
      example:
        expiresIn: 0
        accessToken: accessToken
        refreshToken: refreshToken
    UserStatus:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/User'
        permissions:
          type: array
          description: List of user permissions
          items:
            type: string
      description: User session details and privileges
      example:
        permissions:
          - permissions
          - permissions
        user:
          createdAt: 2000-01-23T04:56:07.000+00:00
          permissions:
            - permissions
            - permissions
          id: id
          email: ""
          username: username
    User:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier of the user
        username:
          type: string
          description: Username of the user
        email:
          type: string
          description: Email address of the user
          format: email
        permissions:
          type: array
          description: List of user permissions
          items:
            type: string
        createdAt:
          type: string
          description: Account creation timestamp
          format: date-time
      description: User information
      example:
        createdAt: 2000-01-23T04:56:07.000+00:00
        permissions:
          - permissions
          - permissions
        id: id
        email: ""
        username: username
    HelmRelease:
      type: object
      properties:
        name:
          type: string
          description: Name of the Helm release
        namespace:
          type: string
          description: Namespace where the release is installed
        chart:
          type: string
          description: Name and version of the Helm chart
        status:
          type: string
          description: Current status of the release
        updated:
          type: string
          description: Last update timestamp
          format: date-time
        revision:
          type: string
          description: Revision number of the release
        app_version:
          type: string
          description: App version of the release
      description: Helm release information
      example:
        app_version: app_version
        name: name
        namespace: namespace
        chart: chart
        updated: 2000-01-23T04:56:07.000+00:00
        status: status
        revision: revision
    HelmReleaseHistory:
      type: object
      properties:
        revision:
          type: integer
          description: Revision number
        updated:
          type: string
          description: Update timestamp
          format: date-time
        status:
          type: string
          description: Status of the release at this revision
        chart:
          type: string
          description: Chart version used
        app_version:
          type: string
          description: App version of the release
        description:
          type: string
          description: Description of the revision
      description: Helm release history entry
      example:
        app_version: app_version
        description: description
        updated: 2000-01-23T04:56:07.000+00:00
        chart: chart
        revision: 0
        status: status
    auth_callback_body:
      type: object
      properties:
        code:
          type: string
          description: Authorization code.
    auth_refresh_body:
      type: object
      properties:
        refreshToken:
          type: string
          description: Refresh token.
    id_permissions_body:
      type: object
      properties:
        permissions:
          type: array
          description: List of permissions.
          items:
            type: string
    releaseName_rollback_body:
      type: object
      properties:
        version:
          type: integer
          description: Version number to rollback to.
  responses:
    BadRequest:
      description: Invalid input
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Unauthorized:
      description: Authentication failed
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Forbidden:
      description: Insufficient permissions
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
  parameters:
    ResourceType:
      name: resourceType
      in: path
      description: Type of the Kubernetes resource.
      required: true
      style: simple
      explode: false
      schema:
        type: string
        enum:
          - Pod
          - Deployment
          - ConfigMap
          - Secret
          - Ingress
          - PersistentVolumeClaim
          - ReplicaSet
          - StatefulSet
          - DaemonSet
          - Job
          - CronJob
          - Service
          - ServiceAccount
    ResourceTypeNonNamespaced:
      name: resourceType
      in: path
      description: Type of the non-namespaced Kubernetes resource.
      required: true
      style: simple
      explode: false
      schema:
        type: string
        enum:
          - Node
          - Namespace
          - CustomResourceDefinition
          - PersistentVolume
          - StorageClass
          - ClusterRole
          - ClusterRoleBinding
    Namespace:
      name: namespace
      in: path
      description: Name of the namespace.
      required: true
      style: simple
      explode: false
      schema:
        type: string
    ResourceName:
      name: resourceName
      in: path
      description: Name of the resource.
      required: true
      style: simple
      explode: false
      schema:
        type: string
    LabelSelector:
      name: labelSelector
      in: query
      description: Selector to filter resources by labels.
      required: false
      style: form
      explode: true
      schema:
        type: string
    FieldSelector:
      name: fieldSelector
      in: query
      description: Selector to filter resources by fields.
      required: false
      style: form
      explode: true
      schema:
        type: string
    Limit:
      name: limit
      in: query
      description: Maximum number of resources to return.
      required: false
      style: form
      explode: true
      schema:
        type: integer
        format: int32
    Continue:
      name: continue
      in: query
      description: Token to continue listing resources from.
      required: false
      style: form
      explode: true
      schema:
        type: string
    SortBy:
      name: sortBy
      in: query
      description: Field to sort the resources by.
      required: false
      style: form
      explode: true
      schema:
        type: string
        enum:
          - name
          - creationTimestamp
    Order:
      name: order
      in: query
      description: Order of sorting.
      required: false
      style: form
      explode: true
      schema:
        type: string
        enum:
          - asc
          - desc
    UserId:
      name: id
      in: path
      description: Unique identifier of the user.
      required: true
      style: simple
      explode: false
      schema:
        type: string
    ReleaseName:
      name: releaseName
      in: path
      description: Name of the Helm release.
      required: true
      style: simple
      explode: false
      schema:
        type: string
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

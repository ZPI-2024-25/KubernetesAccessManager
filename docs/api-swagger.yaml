openapi: 3.0.3
info:
  title: KubernetesUserManager - API
  description: |-
    This is a backend API server documentation for KubernetesUserManager
    
    Some useful links:
    - [Jira](https://samuelus.atlassian.net/jira/software/projects/ZPI/boards/4)
    - [Confluence](https://samuelus.atlassian.net/wiki/spaces/ZPI/overview)
  version: 0.0.1
servers:
  - url: http://localhost/api/v1
tags:
  - name: Kubernetes Resources
    description: Operations related to Kubernetes resources.
  - name: SSO
    description: Single Sign-On endpoints.
  - name: Admin Panel
    description: Administrative operations.
  - name: Helm Applications
    description: Operations related to Helm releases.
security:
  - bearerAuth: []
paths:
  # Namespaced Kubernetes Resources
  /api/{resourceType}/{namespace}:
    get:
      tags:
        - Kubernetes Resources
      summary: List all resources in a namespace
      description: Retrieves a list of all resources of the specified type within the given namespace.
      operationId: listNamespacedResources
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/ResourceType'
        - $ref: '#/components/parameters/Namespace'
        - $ref: '#/components/parameters/LabelSelector'
        - $ref: '#/components/parameters/FieldSelector'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Continue'
        - $ref: '#/components/parameters/SortBy'
        - $ref: '#/components/parameters/Order'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Resource'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
    post:
      tags:
        - Kubernetes Resources
      summary: Create a new resource
      description: Creates a new resource of the specified type in the given namespace.
      operationId: createNamespacedResource
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/ResourceType'
        - $ref: '#/components/parameters/Namespace'
      requestBody:
        description: JSON object representing the resource to be created.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Resource'
      responses:
        '201':
          description: Resource created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Resource'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /api/{resourceType}/{namespace}/{resourceName}:
    get:
      tags:
        - Kubernetes Resources
      summary: Get details of a specific resource
      description: Retrieves detailed information about a specific resource within a namespace.
      operationId: getNamespacedResource
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/ResourceType'
        - $ref: '#/components/parameters/Namespace'
        - $ref: '#/components/parameters/ResourceName'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Resource'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      tags:
        - Kubernetes Resources
      summary: Update an existing resource
      description: Updates an existing resource with new configuration or data.
      operationId: updateNamespacedResource
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/ResourceType'
        - $ref: '#/components/parameters/Namespace'
        - $ref: '#/components/parameters/ResourceName'
      requestBody:
        description: JSON object representing the updated resource.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Resource'
      responses:
        '200':
          description: Resource updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Resource'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      tags:
        - Kubernetes Resources
      summary: Delete a resource
      description: Deletes the specified resource from the namespace.
      operationId: deleteNamespacedResource
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/ResourceType'
        - $ref: '#/components/parameters/Namespace'
        - $ref: '#/components/parameters/ResourceName'
      responses:
        '200':
          description: Resource deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  # Non-Namespaced Kubernetes Resources
  /api/{resourceType}:
    get:
      tags:
        - Kubernetes Resources
      summary: List all resources
      description: Retrieves a list of all resources of the specified type cluster-wide.
      operationId: listClusterResources
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/ResourceTypeNonNamespaced'
        - $ref: '#/components/parameters/LabelSelector'
        - $ref: '#/components/parameters/FieldSelector'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Continue'
        - $ref: '#/components/parameters/SortBy'
        - $ref: '#/components/parameters/Order'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Resource'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
    post:
      tags:
        - Kubernetes Resources
      summary: Create a new resource
      description: Creates a new resource of the specified type.
      operationId: createClusterResource
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/ResourceTypeNonNamespaced'
      requestBody:
        description: JSON object representing the resource to be created.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Resource'
      responses:
        '201':
          description: Resource created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Resource'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

  /api/{resourceType}/{resourceName}:
    get:
      tags:
        - Kubernetes Resources
      summary: Get details of a specific resource
      description: Retrieves detailed information about a specific resource.
      operationId: getClusterResource
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/ResourceTypeNonNamespaced'
        - $ref: '#/components/parameters/ResourceName'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Resource'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      tags:
        - Kubernetes Resources
      summary: Update an existing resource
      description: Updates an existing resource with new configuration or data.
      operationId: updateClusterResource
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/ResourceTypeNonNamespaced'
        - $ref: '#/components/parameters/ResourceName'
      requestBody:
        description: JSON object representing the updated resource.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Resource'
      responses:
        '200':
          description: Resource updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Resource'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      tags:
        - Kubernetes Resources
      summary: Delete a resource
      description: Deletes the specified resource from the cluster.
      operationId: deleteClusterResource
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/ResourceTypeNonNamespaced'
        - $ref: '#/components/parameters/ResourceName'
      responses:
        '200':
          description: Resource deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  # SSO Endpoints
  /auth/callback:
    post:
      tags:
        - SSO
      summary: Exchange authorization code for tokens
      description: Exchanges an authorization code for access and refresh tokens.
      operationId: exchangeAuthCode
      security: []
      requestBody:
        description: Authorization code received from the authentication provider.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                code:
                  type: string
                  description: Authorization code.
      responses:
        '200':
          description: Tokens issued successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthTokens'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /auth/refresh:
    post:
      tags:
        - SSO
      summary: Refresh tokens
      description: Refreshes the access token using a valid refresh token.
      operationId: refreshToken
      security: []
      requestBody:
        description: Refresh token required for generating a new access token.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                refreshToken:
                  type: string
                  description: Refresh token.
      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthTokens'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /auth/logout:
    post:
      tags:
        - SSO
      summary: Logout user
      description: Logs out the user and invalidates their session tokens.
      operationId: logoutUser
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User logged out successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /auth/status:
    get:
      tags:
        - SSO
      summary: Check login status
      description: Checks whether the user is currently logged in and retrieves session details and account privileges.
      operationId: checkLoginStatus
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User is logged in
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserStatus'
        '401':
          $ref: '#/components/responses/Unauthorized'

  # Admin Panel Endpoints
  /users:
    get:
      tags:
        - Admin Panel
      summary: Retrieve list of users
      description: Fetches a list of all registered users.
      operationId: listUsers
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

  /users/{id}:
    get:
      tags:
        - Admin Panel
      summary: Retrieve details of a single user
      description: Fetches detailed information about a specific user by ID.
      operationId: getUser
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/UserId'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      tags:
        - Admin Panel
      summary: Delete a user
      description: Removes a user from the system based on their ID.
      operationId: deleteUser
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/UserId'
      responses:
        '200':
          description: User deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /users/{id}/permissions:
    put:
      tags:
        - Admin Panel
      summary: Assign or change user permissions
      description: Updates the permission levels for a specific user.
      operationId: updateUserPermissions
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/UserId'
      requestBody:
        description: Permission levels to assign to the user.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                permissions:
                  type: array
                  items:
                    type: string
                  description: List of permissions.
      responses:
        '200':
          description: Permissions updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  # Helm Application Endpoints
  /api/helm/releases:
    get:
      tags:
        - Helm Applications
      summary: List all Helm releases
      description: Retrieves a list of all Helm releases across all namespaces.
      operationId: listHelmReleases
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/HelmRelease'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

  /api/helm/releases/{namespace}:
    get:
      tags:
        - Helm Applications
      summary: List releases in a specific namespace
      description: Retrieves all Helm releases within the specified namespace.
      operationId: listHelmReleasesInNamespace
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/Namespace'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/HelmRelease'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
    post:
      tags:
        - Helm Applications
      summary: Install a new release
      description: Installs a new Helm release in the specified namespace using data provided in the request body.
      operationId: installHelmRelease
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/Namespace'
      requestBody:
        description: Configuration data for the new Helm release.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HelmRelease'
      responses:
        '201':
          description: Helm release installed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HelmRelease'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

  /api/helm/releases/{namespace}/{releaseName}:
    get:
      tags:
        - Helm Applications
      summary: Get details of a specific release
      description: Fetches detailed information about a particular Helm release.
      operationId: getHelmRelease
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/Namespace'
        - $ref: '#/components/parameters/ReleaseName'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HelmRelease'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      tags:
        - Helm Applications
      summary: Update an existing release
      description: Updates an existing Helm release with new configuration values.
      operationId: updateHelmRelease
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/Namespace'
        - $ref: '#/components/parameters/ReleaseName'
      requestBody:
        description: Updated configuration data for the Helm release.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HelmRelease'
      responses:
        '200':
          description: Helm release updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HelmRelease'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      tags:
        - Helm Applications
      summary: Uninstall a release
      description: Uninstalls the specified Helm release from the namespace.
      operationId: uninstallHelmRelease
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/Namespace'
        - $ref: '#/components/parameters/ReleaseName'
      responses:
        '200':
          description: Helm release uninstalled successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /api/helm/releases/{namespace}/{releaseName}/history:
    get:
      tags:
        - Helm Applications
      summary: Get release history
      description: Retrieves the version history of the specified Helm release.
      operationId: getHelmReleaseHistory
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/Namespace'
        - $ref: '#/components/parameters/ReleaseName'
      responses:
        '200':
          description: Release history retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/HelmReleaseHistory'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /api/helm/releases/{namespace}/{releaseName}/rollback:
    post:
      tags:
        - Helm Applications
      summary: Rollback a release
      description: Performs a rollback of the Helm release to a previous version.
      operationId: rollbackHelmRelease
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/Namespace'
        - $ref: '#/components/parameters/ReleaseName'
      requestBody:
        description: Version number to rollback to (optional).
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                version:
                  type: integer
                  description: Version number to rollback to.
      responses:
        '200':
          description: Helm release rolled back successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HelmRelease'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  parameters:
    ResourceType:
      name: resourceType
      in: path
      required: true
      description: Type of the Kubernetes resource.
      schema:
        type: string
        enum:
          - Pod
          - Deployment
          - ConfigMap
          - Secret
          - Ingress
          - PersistentVolumeClaim
          - ReplicaSet
          - StatefulSet
          - DaemonSet
          - Job
          - CronJob
          - Service
          - ServiceAccount
    ResourceTypeNonNamespaced:
      name: resourceType
      in: path
      required: true
      description: Type of the non-namespaced Kubernetes resource.
      schema:
        type: string
        enum:
          - Node
          - Namespace
          - CustomResourceDefinition
          - PersistentVolume
          - StorageClass
          - ClusterRole
          - ClusterRoleBinding
    Namespace:
      name: namespace
      in: path
      required: true
      description: Name of the namespace.
      schema:
        type: string
    ResourceName:
      name: resourceName
      in: path
      required: true
      description: Name of the resource.
      schema:
        type: string
    LabelSelector:
      name: labelSelector
      in: query
      required: false
      description: Selector to filter resources by labels.
      schema:
        type: string
    FieldSelector:
      name: fieldSelector
      in: query
      required: false
      description: Selector to filter resources by fields.
      schema:
        type: string
    Limit:
      name: limit
      in: query
      required: false
      description: Maximum number of resources to return.
      schema:
        type: integer
        format: int32
    Continue:
      name: continue
      in: query
      required: false
      description: Token to continue listing resources from.
      schema:
        type: string
    SortBy:
      name: sortBy
      in: query
      required: false
      description: Field to sort the resources by.
      schema:
        type: string
        enum:
          - name
          - creationTimestamp
    Order:
      name: order
      in: query
      required: false
      description: Order of sorting.
      schema:
        type: string
        enum:
          - asc
          - desc
    UserId:
      name: id
      in: path
      required: true
      description: Unique identifier of the user.
      schema:
        type: string
    ReleaseName:
      name: releaseName
      in: path
      required: true
      description: Name of the Helm release.
      schema:
        type: string

  responses:
    BadRequest:
      description: Invalid input
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Unauthorized:
      description: Authentication failed
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Forbidden:
      description: Insufficient permissions
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

  schemas:
    Resource:
      type: object
      description: Generic Kubernetes resource
      properties:
        apiVersion:
          type: string
          description: API version of the resource
        kind:
          type: string
          description: Kind of the resource
        metadata:
          $ref: '#/components/schemas/Metadata'
        spec:
          type: object
          description: Specification of the resource
        status:
          type: object
          description: Current status of the resource
    Metadata:
      type: object
      description: Standard Kubernetes metadata
      properties:
        name:
          type: string
          description: Name of the resource
        namespace:
          type: string
          description: Namespace of the resource
        labels:
          type: object
          additionalProperties:
            type: string
          description: Key-value pairs for labels
        annotations:
          type: object
          additionalProperties:
            type: string
          description: Key-value pairs for annotations
        creationTimestamp:
          type: string
          format: date-time
          description: Timestamp when the resource was created
    Error:
      type: object
      description: Error response
      properties:
        code:
          type: integer
          format: int32
          description: Error code
        message:
          type: string
          description: Error message
        details:
          type: object
          description: Additional error details
    Status:
      type: object
      description: Status response after an operation
      properties:
        status:
          type: string
          description: Status of the operation (e.g., Success, Failure)
        message:
          type: string
          description: Message providing additional information
        code:
          type: integer
          format: int32
          description: HTTP status code
    AuthTokens:
      type: object
      description: Authentication tokens
      properties:
        accessToken:
          type: string
          description: JWT access token
        refreshToken:
          type: string
          description: Refresh token
        expiresIn:
          type: integer
          format: int32
          description: Access token expiration time in seconds
    UserStatus:
      type: object
      description: User session details and privileges
      properties:
        user:
          $ref: '#/components/schemas/User'
        permissions:
          type: array
          items:
            type: string
          description: List of user permissions
    User:
      type: object
      description: User information
      properties:
        id:
          type: string
          description: Unique identifier of the user
        username:
          type: string
          description: Username of the user
        email:
          type: string
          format: email
          description: Email address of the user
        permissions:
          type: array
          items:
            type: string
          description: List of user permissions
        createdAt:
          type: string
          format: date-time
          description: Account creation timestamp
    HelmRelease:
      type: object
      description: Helm release information
      properties:
        name:
          type: string
          description: Name of the Helm release
        namespace:
          type: string
          description: Namespace where the release is installed
        chart:
          type: string
          description: Name and version of the Helm chart
        status:
          type: string
          description: Current status of the release
        updated:
          type: string
          format: date-time
          description: Last update timestamp
        revision:
          type: integer
          description: Revision number of the release
    HelmReleaseHistory:
      type: object
      description: Helm release history entry
      properties:
        revision:
          type: integer
          description: Revision number
        updated:
          type: string
          format: date-time
          description: Update timestamp
        status:
          type: string
          description: Status of the release at this revision
        chart:
          type: string
          description: Chart version used
        description:
          type: string
          description: Description of the revision
